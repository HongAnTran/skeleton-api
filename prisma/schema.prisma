// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}






enum ShiftSwapStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  COMPLETED
}


enum AccountRole {
  ADMIN
  USER
  EMPLOYEE
}

enum ShiftSignupStatus {
  PENDING
  COMPLETED
  CANCELLED
}


model User {
  id           String     @id @default(cuid())
  name         String   @unique
  phone        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  account      Account?
  employees    Employee[]
  branches     Branch[]
  departments  Department[]
  shiftSlots   ShiftSlot[]   
  shiftSlotTypes ShiftSlotType[]
  taskTemplates TaskTemplate[]
}
model Account {
  id                  String   @id @default(cuid()) 
  username            String  @unique
  email               String     @unique
  userId              String?   @unique
  employeeId          String?   @unique
  passwordHash        String?
  provider            String?  
  refreshToken        String?
  role                AccountRole 
  user                User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  employee            Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  @@index([userId])
  @@index([employeeId])
  @@unique([userId, employeeId])
}

model Employee {
  id            String     @id @default(cuid())
  userId        String
  branchId      String?
  departmentId  String?   
  name      String
  account       Account?  
  phone         String?
  active        Boolean    @default(true)
  avatar        String?
  role          String?
  currentLevel  Int        @default(0) 
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch        Branch?    @relation(fields: [branchId], references: [id])
  department    Department?    @relation(fields: [departmentId], references: [id])
  shiftSignups  ShiftSignup[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  // Shift swap relations
  swapRequestsSent ShiftSwapRequest[] @relation("ShiftSwapRequester")
  swapRequestsReceived ShiftSwapRequest[] @relation("ShiftSwapTarget") 
  tasks TaskInstance[]
}

model Branch {
  id         String    @id @default(cuid())
  userId     String
  name       String
  address    String?
  active     Boolean   @default(true)
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  employees  Employee[]
  shiftSlots   ShiftSlot[]
  updatedAt    DateTime   @updatedAt
}

model Department {
  id       String   @id @default(cuid())
  userId   String
  name     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt    DateTime   @updatedAt
  createdAt    DateTime   @default(now())
  employees  Employee[]
  shiftSlots ShiftSlot[]
  tasks TaskInstance[]
}


model ShiftSlot {
  id        String    @id @default(cuid())
  userId    String
  branchId  String
  capacity  Int    
  date      DateTime  
  note        String?
  createdAt DateTime  @default(now())
  updatedAt    DateTime   @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch    Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  departmentId String
  department Department @relation(fields: [departmentId], references: [id])
  signups   ShiftSignup[]
  type      ShiftSlotType @relation(fields: [typeId], references: [id])
  typeId    String
  // Shift swap relations
  requesterSwapRequests ShiftSwapRequest[] @relation("RequesterSlot")
  targetSwapRequests    ShiftSwapRequest[] @relation("TargetSlot")
}

model ShiftSlotType {
  id        String    @id @default(cuid())
  userId    String
  name      String
  startDate DateTime
  endDate   DateTime
  isDeleted Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  shiftSlots ShiftSlot[]
  
  updatedAt    DateTime   @updatedAt
  createdAt    DateTime   @default(now())
}

model ShiftSignup {
  id          String     @id @default(cuid())
  employeeId  String
  createdAt   DateTime   @default(now())
  slotId      String
  status      ShiftSignupStatus @default(PENDING)
  canceledAt  DateTime?
  cancelReason String?
  canceledBy String?
  totalHours Float
  employee    Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  slot        ShiftSlot @relation(fields: [slotId], references: [id], onDelete: Cascade)
  updatedAt   DateTime   @updatedAt
}


model ShiftSwapRequest {
  id              String          @id @default(cuid())
  requesterId     String
  targetId        String
  requesterSlotId String
  targetSlotId    String
  status          ShiftSwapStatus @default(PENDING)
  reason          String?
  message         String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  respondedAt     DateTime?
  
  // Relations
  requester       Employee        @relation("ShiftSwapRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  target          Employee        @relation("ShiftSwapTarget", fields: [targetId], references: [id], onDelete: Cascade)
  requesterSlot   ShiftSlot       @relation("RequesterSlot", fields: [requesterSlotId], references: [id], onDelete: Cascade)
  targetSlot      ShiftSlot       @relation("TargetSlot", fields: [targetSlotId], references: [id], onDelete: Cascade)
  
  @@index([requesterId])
  @@index([targetId])
  @@index([status])
}




enum TaskStatusV2 {
  PENDING
  IN_PROGRESS
  COMPLETED
  APPROVED
  REJECTED
  EXPIRED
}

enum TaskScope {
  INDIVIDUAL
  DEPARTMENT
}

enum Frequency {
  NONE
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

enum Aggregation {
  COUNT
  SUM
  AVERAGE
  MAX
  MIN
}

model TaskTemplate {
  id            String      @id @default(cuid())
  title         String
  description   String?
  scope         TaskScope
  level         Int         @default(1)
  unit          String?
  defaultTarget Float?
  aggregation   Aggregation?
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  schedules     TaskSchedule[]
  instances     TaskInstance[]
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
}

model TaskSchedule {
  id           String      @id @default(cuid())
  templateId   String
  template     TaskTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  frequency    Frequency   @default(MONTHLY)
  interval     Int         @default(1)
  dayOfMonth   Int?
  startDate    DateTime
  endDate      DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  cycles       TaskCycle[]
}

model TaskCycle {
  id           String      @id @default(cuid())
  scheduleId   String
  schedule     TaskSchedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  periodStart  DateTime
  periodEnd    DateTime
  generatedAt  DateTime    @default(now())
  status       TaskStatusV2  @default(IN_PROGRESS)

  instances    TaskInstance[]

  @@unique([scheduleId, periodStart, periodEnd])
}

model TaskInstance {
  id             String      @id @default(cuid())
  templateId     String
  template       TaskTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  cycleId        String
  cycle          TaskCycle    @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  scope          TaskScope
  employeeId     String?
  departmentId   String?
  employee       Employee?   @relation(fields: [employeeId], references: [id])
  department     Department? @relation(fields: [departmentId], references: [id])



  level          Int         @default(1)   
  required       Boolean     @default(true) 

  title          String
  description    String?
  target         Float?
  unit           String?
  quantity       Float?
  status         TaskStatusV2  @default(PENDING)
  completedAt    DateTime?
  completedBy    String?
  approvedAt     DateTime?
  approvedBy     String?
  rejectedAt     DateTime?
  rejectedBy     String?
  rejectedReason String?

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  progressEvents TaskProgressEvent[]
  approvals      TaskApproval[]

  @@index([cycleId, scope, level, status])
  @@index([employeeId])
  @@index([departmentId])
}

model TaskProgressEvent {
  id           String       @id @default(cuid())
  instanceId   String
  instance     TaskInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  delta        Float
  source       String?
  note         String?
  occurredAt   DateTime
  createdAt    DateTime     @default(now())
  createdBy    String?

  @@index([instanceId, occurredAt])
}

model TaskApproval {
  id           String        @id @default(cuid())
  instanceId   String
  instance     TaskInstance  @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  action       String        
  reason       String?
  actedBy      String
  actedAt      DateTime      @default(now())
}

