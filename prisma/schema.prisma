// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}




enum TaskStatus {
  PENDING   
  DONE   
}

enum ShiftSwapStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  COMPLETED
}


enum AccountRole {
  ADMIN
  USER
  EMPLOYEE
}

enum ShiftSignupStatus {
  PENDING
  COMPLETED
  CANCELLED
}


model User {
  id           String     @id @default(cuid())
  name         String   @unique
  phone        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  account      Account?
  employees    Employee[]
  branches     Branch[]
  departments  Department[]
  shiftSlots   ShiftSlot[]   
  shiftSlotTypes ShiftSlotType[]
}
model Account {
  id                  String   @id @default(cuid()) 
  username            String  @unique
  email               String     @unique
  userId              String?   @unique
  employeeId          String?   @unique
  passwordHash        String?
  provider            String?  
  refreshToken        String?
  role                AccountRole 
  user                User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  employee            Employee? @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  @@index([userId])
  @@index([employeeId])
  @@unique([userId, employeeId])
}

model Employee {
  id            String     @id @default(cuid())
  userId        String
  branchId      String?
  departmentId  String?   
  name      String
  account       Account?  
  phone         String?
  active        Boolean    @default(true)
  avatar        String?
  currentLevel  Int        @default(1) 
  user          User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch        Branch?    @relation(fields: [branchId], references: [id])
  department    Department?    @relation(fields: [departmentId], references: [id])
  shiftSignups  ShiftSignup[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  tasks Task[]
  // Shift swap relations
  swapRequestsSent ShiftSwapRequest[] @relation("ShiftSwapRequester")
  swapRequestsReceived ShiftSwapRequest[] @relation("ShiftSwapTarget") 
}

model Branch {
  id         String    @id @default(cuid())
  userId     String
  name       String
  address    String?
  active     Boolean   @default(true)
  createdAt  DateTime  @default(now())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  employees  Employee[]
  shiftSlots   ShiftSlot[]
  updatedAt    DateTime   @updatedAt
}

model Department {
  id       String   @id @default(cuid())
  userId   String
  name     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt    DateTime   @updatedAt
  createdAt    DateTime   @default(now())
  employees  Employee[]
  shiftSlots ShiftSlot[]
}


model ShiftSlot {
  id        String    @id @default(cuid())
  userId    String
  branchId  String
  capacity  Int    
  date      DateTime  
  note        String?
  createdAt DateTime  @default(now())
  updatedAt    DateTime   @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch    Branch    @relation(fields: [branchId], references: [id], onDelete: Cascade)
  departmentId String
  department Department @relation(fields: [departmentId], references: [id])
  signups   ShiftSignup[]
  type      ShiftSlotType @relation(fields: [typeId], references: [id])
  typeId    String
  // Shift swap relations
  requesterSwapRequests ShiftSwapRequest[] @relation("RequesterSlot")
  targetSwapRequests    ShiftSwapRequest[] @relation("TargetSlot")
}

model ShiftSlotType {
  id        String    @id @default(cuid())
  userId    String
  name      String
  startDate DateTime
  endDate   DateTime
  isDeleted Boolean   @default(false)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  shiftSlots ShiftSlot[]
  
  updatedAt    DateTime   @updatedAt
  createdAt    DateTime   @default(now())
}

model ShiftSignup {
  id          String     @id @default(cuid())
  employeeId  String
  createdAt   DateTime   @default(now())
  slotId      String
  status      ShiftSignupStatus @default(PENDING)
  canceledAt  DateTime?
  cancelReason String?
  canceledBy String?
  totalHours Float
  employee    Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  slot        ShiftSlot @relation(fields: [slotId], references: [id], onDelete: Cascade)
  updatedAt   DateTime   @updatedAt
}
model Task {
  id          String     @id @default(cuid())
  employeeId  String
  title       String
  description String?
  status      TaskStatus @default(PENDING)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  level       Int       @default(1)  
  employee  Employee      @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model ShiftSwapRequest {
  id              String          @id @default(cuid())
  requesterId     String
  targetId        String
  requesterSlotId String
  targetSlotId    String
  status          ShiftSwapStatus @default(PENDING)
  reason          String?
  message         String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  respondedAt     DateTime?
  
  // Relations
  requester       Employee        @relation("ShiftSwapRequester", fields: [requesterId], references: [id], onDelete: Cascade)
  target          Employee        @relation("ShiftSwapTarget", fields: [targetId], references: [id], onDelete: Cascade)
  requesterSlot   ShiftSlot       @relation("RequesterSlot", fields: [requesterSlotId], references: [id], onDelete: Cascade)
  targetSlot      ShiftSlot       @relation("TargetSlot", fields: [targetSlotId], references: [id], onDelete: Cascade)
  
  @@index([requesterId])
  @@index([targetId])
  @@index([status])
}
